{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Desktop/mysite/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport storage from 'local-storage-fallback';\nimport Nav from './Components/Nav';\nimport LandingPage from './Components/LandingPage';\nimport BlogPage from './Components/BlogPage'; //These are the styles that need to be changed when we move to dark theme.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DarkTheme = createGlobalStyle`\nbody{\n  background-color: ${props => props.theme.mode === 'dark' ? '#121212' : '#EEE'};\n  color: ${props => props.theme.mode === 'dark' ? '#EEE' : '#111'};\n  }\n}\n.icon{\n  color:${props => props.theme.mode === 'dark' ? '#EEE' : '#111'};\n  }\n}\n.icon:hover{\n  color:${props => props.theme.mode === 'dark' ? '#e04f62' : '#e04f62'};\n  }\n.blog-card{\n  background-color:${props => props.theme.mode === 'dark' ? '#1F1F1F' : '#fff'};\n  }\n}\n.article-details,.post-title{\n  color: ${props => props.theme.mode === 'dark' ? '#d9dedc' : '#111'};\n  }\n}\n.header{\n  background-color:${props => props.theme.mode === 'dark' ? '#1F1F1F' : '#fff'};\n  }\n}\n.logo-nav a,.projects p,.home-title,.blogs-title,.projects-title{\n  color: ${props => props.theme.mode === 'dark' ? '#EEE' : '#111'};\n  }\n}\n.blog__description{\n  background-color:${props => props.theme.mode === 'dark' ? '#1' : '#fff'};\n  }\n}\n}\n`;\n_c = DarkTheme;\n\nfunction App() {\n  _s();\n\n  //This historytheme Function is to find weather the person \n  //is opened the the website in that Browser previously or not.\n  //If there is an item in storage named as theme then it takes \n  //that theme else as it will become false that then it takes light.\n  const historyTheme = () => {\n    const prevTheme = storage.getItem('theme');\n    return prevTheme ? JSON.parse(prevTheme) : \"light\";\n  };\n\n  const [theme, setTheme] = useState(historyTheme); //Here we are setting up the theme to the storage to store it for next visit.\n  //And this should run as soon as theme variable changes so that will update\n  //the storage. \n\n  useEffect(() => {\n    storage.setItem('theme', JSON.stringify(theme));\n  }, [theme]);\n\n  const themeToggler = () => {\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: {\n      mode: `${theme}`\n    },\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DarkTheme, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(Nav, {\n            themeSetter: () => {\n              themeToggler();\n            },\n            theme: theme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/\",\n              children: /*#__PURE__*/_jsxDEV(LandingPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/blogs/:id\",\n              children: /*#__PURE__*/_jsxDEV(BlogPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SdmBXHVVtS3UKryh1+qmQGteJsM=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DarkTheme\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/pranav/Desktop/mysite/frontend/src/App.js"],"names":["useState","useEffect","BrowserRouter","Router","Switch","Route","ThemeProvider","createGlobalStyle","storage","Nav","LandingPage","BlogPage","DarkTheme","props","theme","mode","App","historyTheme","prevTheme","getItem","JSON","parse","setTheme","setItem","stringify","themeToggler"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport storage from 'local-storage-fallback';\n\nimport Nav from './Components/Nav';\nimport LandingPage from './Components/LandingPage';\nimport BlogPage from './Components/BlogPage';\n\n\n//These are the styles that need to be changed when we move to dark theme.\nconst DarkTheme = createGlobalStyle`\nbody{\n  background-color: ${props =>\n    props.theme.mode === 'dark' ? '#121212' : '#EEE'};\n  color: ${props => \n    props.theme.mode === 'dark' ? '#EEE' : '#111'};\n  }\n}\n.icon{\n  color:${props => \n    props.theme.mode === 'dark' ? '#EEE' : '#111'};\n  }\n}\n.icon:hover{\n  color:${props => \n    props.theme.mode === 'dark' ? '#e04f62' : '#e04f62'};\n  }\n.blog-card{\n  background-color:${props => \n    props.theme.mode === 'dark' ? '#1F1F1F' : '#fff'};\n  }\n}\n.article-details,.post-title{\n  color: ${props => \n    props.theme.mode === 'dark' ? '#d9dedc' : '#111'};\n  }\n}\n.header{\n  background-color:${props => \n    props.theme.mode === 'dark' ? '#1F1F1F' : '#fff'};\n  }\n}\n.logo-nav a,.projects p,.home-title,.blogs-title,.projects-title{\n  color: ${props => \n    props.theme.mode === 'dark' ? '#EEE' : '#111'};\n  }\n}\n.blog__description{\n  background-color:${props => \n    props.theme.mode === 'dark' ? '#1' : '#fff'};\n  }\n}\n}\n`\n\nfunction App() {\n\n  //This historytheme Function is to find weather the person \n  //is opened the the website in that Browser previously or not.\n  //If there is an item in storage named as theme then it takes \n  //that theme else as it will become false that then it takes light.\n\n  const historyTheme = () =>{\n    const prevTheme = storage.getItem('theme')\n    return prevTheme ? JSON.parse(prevTheme) : \"light\"\n  }\n  \n  const [theme,setTheme] = useState(historyTheme);\n\n  //Here we are setting up the theme to the storage to store it for next visit.\n  //And this should run as soon as theme variable changes so that will update\n  //the storage. \n\n  useEffect(() => {\n    storage.setItem('theme', JSON.stringify(theme));\n  }, [theme])\n\n  const themeToggler =() =>{\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  }\n\n  return (\n    <ThemeProvider theme={{mode:`${theme}`}}>\n      <>\n      <DarkTheme/>\n    <Router>\n    <div className=\"App\">\n\n      {/* I had done the  dark theme by giving on click functionality \n      in the Nav Component and giving it the function from here by props.\n      And theme prop is for giving it the giving that moon and moon and sun icons */}\n\n      <Nav themeSetter={() =>{themeToggler()}} theme={theme}/>\n        <Switch>\n          <Route exact path='/'>\n            <LandingPage/>\n          </Route>\n          <Route exact path='/blogs/:id'>\n            <BlogPage/>\n          </Route>\n        </Switch>\n    </div>\n    </Router>\n    </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}